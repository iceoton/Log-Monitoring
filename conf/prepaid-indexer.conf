input {
         sqs {
         access_key_id =>"AKIAJOKRAUNRI3QRHWIQ" # string (required)]
        queue => "TMN-Log-Monitoring-Alpha-Prepaid-Queue" # string (required)
         secret_access_key => "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" # string (required)
         region => "ap-southeast-1"
        }
}

filter{
        grok{
                match => {"message" => "%{WORD:logLevel}\s+%{TIMESTAMP_ISO8601:time} %{JAVACLASS:class}: %{GREEDYDATA:logMessage}"}
                }
                date{
                         match => ["time" ,"YYYY-MM-dd HH:mm:ss,SSS", "ISO8601" ]
                         target => "@timestamp"
                }
	grok{
		match=>{ "logMessage" => "\((?<tranID>[0-9]{18})\)"
			}
	
		}
        grok{
                match=>{ "logMessage" => "Narrative:\s+(?<MerchantID>\d+)\s+(?<MerchantName>.{23})"
                        }

                }

	
	ruby{
		code => "
			def isEmpty(object)
    if object.nil? or object == []
        return true
    else
        return false
    end
end

rawData = event['message']
code = rawData.scan(/Return code: (\d+)/)
if(!isEmpty(code))
    code = code[0][0].to_i 
    if(code == 0)
        status = 'SUCCESS'
    else
        status = 'FAIL'
    end
    event['status'] = status
end

narrativeID = rawData.scan(/Narrative.*: (\d+)/i)
if !isEmpty(narrativeID)
    event['narrativeID'] = narrativeID[0][0]    
end

narativeName=rawData.scan(/Narrative.*: \d+\s(.{23})/i)
if ! isEmpty(narativeName)
    event['narrativeName'] = narrativeName[0][0].strip!
end
		"
		
	}

	mutate {
  	  remove_tag => ["tags", "time"]
  	}

}

output{
        #stdout{codec => rubydebug}
        elasticsearch {
                         host => "52.74.104.59"
			 port => 9200
                         protocol => "http"
                         user => "indexer" # string
                         password => "indexer" # string
                         index => "prepaid-%{+YYYY}"
			 template => "/data/logstash-1.5.1/output-template/elasticsearch-template-prepaid.json"
                         template_name => "prepaid"
   }

}

