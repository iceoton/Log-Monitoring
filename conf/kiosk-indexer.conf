
input {
         sqs {
                access_key_id =>"AKIAJOKRAUNRI3QRHWIQ" # string (required)]
                queue => "TMN-Log-Monitoring-Alpha-Kiosk-Queue" # string (required)
                secret_access_key => "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" # string (required)
                region => "ap-southeast-1"
         }
}

filter{
        if[log_format] == "kiosk"{
              	ruby{
			code => "def isEmpty(object)
    if object.nil? or object == []
        return true
    else
        return false
    end
end

rawData = event['message']
dataArray = rawData.split(' : ')
##### Date 

date = rawData.scan(/[\d]{4}.[\d]{2}.[\d]{2} [\d]{2}.[\d]{2}.[\d]{2}/)
if(!isEmpty(date))
    event['date'] = date[0]
end
##### Log Level
logLevel = rawData.scan(/(INFO|DEBUG|ERROR|WARN)/)
if(!isEmpty(logLevel))
    logLevel = logLevel[0][0]
    event['logLevel'] = logLevel
end
##### Container
    container = dataArray[1]
    event['container'] = container
##### Class Name & Message
if(true if Float(dataArray[2]) rescue false ) ##check value type
    number = dataArray[2]
    className = dataArray[3]
    event['number'] = number.to_i
else
    className = dataArray[2]
end
event['className'] = className


if((className == 'PostBillConfirmBackgroundServiceImpl' && logLevel == 'ERROR') || (className == 'EnquiryController' && logLevel == 'ERROR'))
    status = 'FAIL'
elsif((className == 'PostBillConfirmRestDaoImpl' && !(logLevel == 'ERROR')) || (className == 'EnquiryDaoImpl' && !(logLevel == 'ERROR')))
    status = 'SUCCESS'
end
if !isEmpty(status)
    event['status'] = status
end



logMessage = rawData.scan(/(INFO|DEBUG|ERROR|WARN): \d+ : (.*)/m)
if(!isEmpty(logMessage))
   event['logMessage'] = logMessage[0][1]
end

##### MacAddress

macAddress = rawData.scan(/\.*\[ref=([\da-fA-F]{2}-[\da-fA-F]{2}-[\da-fA-F]{2}-[\da-fA-F]{2}-[\da-fA-F]{2}-[\da-fA-F]{2})/)
if(!isEmpty(macAddress))
    event['macAddress'] = macAddress[0][0]
end
##### TranID
tranID = rawData.scan(/transactionId=(\d+)[,\]]/)

if !isEmpty(tranID)
    event['tranID'] = tranID[0][0]
end
##### Line Number

lineNumber = rawData.scan(/(INFO|DEBUG|ERROR|WARN): (\d+)/)
if !isEmpty(lineNumber)
    event['lineNumber'] = lineNumber[0][1].to_i    
end
if isEmpty(container)
    event['container'] = 'null'
end
"
		}
                date{
                         match => ["date" ,"YYYY-MM-dd HH:mm:ss" ,"ISO8601"]
                         target => "@timestamp"
                }
		 mutate {
         		 remove_tag => ["tags","date"]
       		 }

        }
}
output{
       # stdout{codec => rubydebug}

		if [container] != 'null'{
			elasticsearch {
                            host => "52.74.104.59"
                            protocol => "http"
                            port => 9200
                            user => "admin" # string
                            password => "qwerty" # string
                            index => "kiosk-%{+YYYY}"
			    template => "/data/logstash-1.5.1/output-template/elasticsearch-template-kiosk.json"
			    template_name => "kiosk"
		}
			  
            }

           # file{
            #    path=> "test.log"
           # }
	
}


